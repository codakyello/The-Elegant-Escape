const AppError = require("../utils/appError");

// Invalid mondoDB ID
const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}`;
  return new AppError(message, 400);
};

// Duplicate field values
const handleDuplicateFieldsDB = (err) => {
  const value = err.errmsg.match(/(["'])(?:(?=(\\?))\2.)*?\1/)[0];
  const message = `Duplicate field value: ${value}. Please use another value!.`;

  return new AppError(message, 400);
};

// Validation Errors
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors).map((el) => el.message);
  console.log(errors);
  const message = `Invalid input data ${errors.join(". ")}`;

  return new AppError(message, 400);
};

const handleJWTError = () => {
  const message = "Invalid token. Please log in again";
  return new AppError(message, 401);
};

const handleJWTExpriedError = () =>
  new AppError("Your token has expired! Please log in again.", 401);

const handleTimeoutError = () =>
  new AppError(
    "Your operation couldn't be completed. Please try again later.",
    500
  );

const sendErrDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    message: err.message,
    error: err,
    stack: err.stack,
  });
};

const sendErrProd = (err, res) => {
  // Operational, errors generated by user interactions
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });

    // Programming or other unknown error: don't show error details
  } else {
    // 1) Log error
    console.log("Error ðŸ’£", err);

    // 2) Send generic message
    res
      .status(err.statusCode)
      .json({ status: err.status, message: "Something went very wrong" });
  }
};

module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "error";

  if (process.env.NODE_ENV === "development") {
    console.log("here in dev");
    console.log(err);
    sendErrDev(err, res);
  } else if (process.env.NODE_ENV === "production") {
    let error = Object.create(
      Object.getPrototypeOf(err),
      Object.getOwnPropertyDescriptors(err)
    );

    if (err.name === "CastError") error = handleCastErrorDB(err);

    if (err.code === 11000) error = handleDuplicateFieldsDB(err);

    if (err.name === "ValidationError") error = handleValidationErrorDB(err);

    if (err.name === "JsonWebTokenError") error = handleJWTError();

    if (err.name === "TokenExpiredError") error = handleJWTExpriedError();

    if (err.name === "MongooseError") error = handleTimeoutError();

    sendErrProd(error, res);
  }
};
